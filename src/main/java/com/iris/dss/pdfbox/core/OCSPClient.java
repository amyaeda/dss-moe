package com.iris.dss.pdfbox.core;

import java.io.BufferedOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.math.BigInteger;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.Security;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;

import org.bouncycastle.asn1.ASN1EncodableVector;
import org.bouncycastle.asn1.DERObjectIdentifier;
import org.bouncycastle.asn1.DEROctetString;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.ocsp.OCSPObjectIdentifiers;
import org.bouncycastle.asn1.ocsp.OCSPRequest;
import org.bouncycastle.asn1.x509.Extension;
import org.bouncycastle.asn1.x509.Extensions;

import org.bouncycastle.cert.X509CertificateHolder;
import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;
import org.bouncycastle.cert.ocsp.BasicOCSPResp;
import org.bouncycastle.cert.ocsp.CertificateID;
import org.bouncycastle.cert.ocsp.OCSPException;
import org.bouncycastle.cert.ocsp.OCSPReq;
import org.bouncycastle.cert.ocsp.OCSPReqBuilder;
import org.bouncycastle.cert.ocsp.OCSPResp;
import org.bouncycastle.cert.ocsp.RevokedStatus;
import org.bouncycastle.cert.ocsp.SingleResp;
import org.bouncycastle.cert.ocsp.UnknownStatus;
import org.bouncycastle.operator.DigestCalculator;
import org.bouncycastle.operator.DigestCalculatorProvider;
import org.bouncycastle.operator.jcajce.JcaDigestCalculatorProviderBuilder;


/**
 * The OCSP client uses the Bouncy castle API to perform a single OCSP request.
 * The client connects with the given host address on the http port to perform a
 * post request with the OCSP request in it. The response is then parsed and the
 * certificate status is updated, after which a reply is generated.
 * 
 * @author Kristof Overdulve
 * @version 1.0.0 21 Apr 2008
 */
public final class OCSPClient {
	
	public static final String STATUS_GOOD = "GOOD";
	public static final String STATUS_REVOKED = "REVOKED";
	public static final String STATUS_UNKNOWN = "UNKNOWN";
		
	public static String STATUS = "";	
	public static String ERROR = "";	
	
	
	public static OCSPClient INSTANCE = new OCSPClient();
	
	
	private String ocspStatus = "";	
	private String errorMessage = "";	
	
	public static OCSPClient getInstance() {
		return INSTANCE;
	}
	
	public String getStatus() {
		return this.ocspStatus;
	}
	
	public String getError() {
		return this.errorMessage;
	}
	
	protected OCSPReq generateOCSPRequest(
			final X509Certificate issuerCert, final BigInteger serialNumber) throws Exception {
		
		// Add provider BC
		Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());

		DigestCalculatorProvider digestCalculatorProv = new JcaDigestCalculatorProviderBuilder().build();
		
		
		X509CertificateHolder issuerCert1 = new X509CertificateHolder(issuerCert.getEncoded());
		
		// Generate the id for the certificate we are looking for and generate the request
		final OCSPReqBuilder gen = new OCSPReqBuilder();
		gen.addRequest( 
				new CertificateID( 				
						digestCalculatorProv.get(CertificateID.HASH_SHA1), issuerCert1, serialNumber));

		// create details for nonce extension
		final BigInteger nonce = BigInteger.valueOf(System.currentTimeMillis());
		
		//final Vector<DERObjectIdentifier> oids = new Vector<DERObjectIdentifier>();
		//oids.add(OCSPObjectIdentifiers.id_pkix_ocsp_nonce);
		
		ASN1EncodableVector exts = new ASN1EncodableVector();		
		exts.add( 
				new Extension(
						OCSPObjectIdentifiers.id_pkix_ocsp_nonce, false, new DEROctetString(nonce.toByteArray()) ) 
				);

		// Set the OID extensions
		gen.setRequestExtensions(Extensions.getInstance(new DERSequence(exts)));

		// Return result
		return gen.build();
	}

	/**
	 * Sends a OCSP request to the given host address and processes the reply.
	 * The status of the cert is then adjusted to reflect the results in the
	 * response generated by the OCSP responder.
	 * 
	 * @param issuer
	 *            is the certificate of the Certificate Authority issuing the
	 *            given cert
	 * @param cert
	 *            is the certificate to verify, using it's serial key and the
	 *            certificate of the issuer, the status of this parameter is
	 *            modified according to the results of the verification
	 * @param hostaddr
	 *            is the host address (HTTP capable) to send the request to
	 * @return whether the verification succeeded
	 * @throws OCSPException
	 *             when the OCSP request couldn't be generated
	 * @throws IOException
	 *             when the encoding of the request failed
	 * @throws CertificateException
	 *             when the x509 certificate couldn't be retrieved from the
	 *             given certificates
	 */
	public boolean request(
			final X509Certificate issuer, 
			final X509Certificate cert, 
			final String hostaddr) throws Exception {
		
		// Generate OCSP request
		final OCSPReq request = generateOCSPRequest(issuer, cert.getSerialNumber());
		final byte[] array = request.getEncoded();

		HttpURLConnection con = null;
		final URL url = new URL((String) hostaddr);
		con = (HttpURLConnection) url.openConnection();
		con.setRequestProperty("Content-Type", "application/ocsp-request");
		con.setRequestProperty("Accept", "application/ocsp-response");
		con.setDoOutput(true);
		final OutputStream out = con.getOutputStream();
		final DataOutputStream dataOut = new DataOutputStream(
				new BufferedOutputStream(out));
		dataOut.write(array);

		dataOut.flush();
		dataOut.close();

		// Get Response
		final InputStream in = (InputStream) con.getContent();

		// Check errors in response:
		if (con.getResponseCode() != 200) {
			this.errorMessage = "RespCode:"+ con.getResponseCode() + ";RespMessage:" + con.getResponseMessage();
			return false;
		}

		// Fetch the responses
		final OCSPResp ocspResponse = new OCSPResp(in);
		final BasicOCSPResp basicResponse = (BasicOCSPResp) ocspResponse
				.getResponseObject();

		
		if (basicResponse == null) {
			return false;
		} else {
			final SingleResp[] responses = basicResponse.getResponses();
			final SingleResp resp = responses[0];
			final Object status = resp.getCertStatus();

			// Check the status of the response and adjust certificate
			if (status instanceof RevokedStatus) {
				this.ocspStatus = "REVOKED";
				return false;
			} else if (status instanceof UnknownStatus) {
				this.ocspStatus = "UNKNOWN";
				return false;
			} else {					
				this.ocspStatus = "GOOD";				
				return true;
			}
		}
	}
}
